版本控制​
当您构建 Shopline 主题时，您可以引入可选的版本管理来追踪和管理对主题代码的更改。版本控制可帮助您随时间变化管理代码。
主题代码的版本控制推荐使用 Git 进行版本管理

管理源代码和编译代码​
您可以使用构建流水线将主题的源代码转换为针对浏览器运行时优化的编译代码。只要确保上传到 Shopline 的 ZIP 包中是符合 Shopline 默认目录结构即可。

您可以从多种策略中进行选择，以在版本控制中同时管理源代码和编译代码。

对源代码和编译代码使用单独的存储库。
使用分支分离源代码和编译代码。
混合源代码和编译代码。
仅管理源代码。
使用版本管理源代码和编译代码的优势​
可以使用常见的构建工具，例如 Webpack、Rollup 和 PostCSS。
文件可以在开发人员的机器上逐步构建，这样可以实时预览对源代码所做的更改。
通过 Shopline 对编译的代码更改可以很容易地识别。
但是，使用这种方式，对比编译代码所作的更改需要手动回填到源代码中。

对源代码和编译代码使用单独的存储库​
开发人员可以拥有一个包含其源代码和构建工具的存储库，以及另一个包含其编译代码的版本化表示的存储库。
优点

从仅源代码版本控制模型移动时，使用单独的存储库很容易采用。您可以继续将编译的代码直接推送到商店
缺点

您需要为单个主题跨两个存储库工作，这会使回填源代码更加复杂。
不受文件转换影响的静态文件会在存储库之间复制，从而导致额外的维护和回填。
使用分支分离源代码和编译代码​
您可以在与源代码不同的分支中发布主题的编译代码。该分支的内容与 Shopline 主题平台兼容。
实现此目的的一种方法是使用git subtree. 使用该subtree命令，您可以将编译后的代码提取到一个分支，然后进行打包上传。
优点

您的存储库中有一个用于生产代码的不同位置。
分支的提交历史是干净的。生产分支中唯一的提交是对生产代码的更新。对源代码的更改保留在它们自己的分支中。
缺点

预览工作分支的内容需要另一个包含“预览”生产代码的分支。管理分支机构可能会变得很麻烦。
不受文件转换影响的静态文件位于单独的分支中，从而导致额外的维护和回填。
混合源代码和编译代码​
您可以在与源代码相同的文件夹结构中混合编译的代码文件。例如，在assets文件夹内，您可以添加main.js源文件和编译后的 main.min.js。
优点

混合源代码和编译代码可以将编译文件的数量减少到只需要编译的文件。这意味着商家对非编译文件的更改不需要回填或反向移植到您的源代码。
缺点

编译后的代码可能很难识别，商家可能会直接对其进行编辑。
如果对已编译的代码进行了编辑，则需要回填它们以避免在下次从源代码编译代码时丢失。
在版本控制中仅管理您的源代码​
您可以选择仅将源代码提交到版本控制，然后在您想要创建发布时将编译后的代码进行打包上传部署到商店。部署可以使用 Shopline CLI 从开发人员的机器上手动完成，也可以使用持续集成自动完成。
优点

它可以利用常见的构建工具，例如 Webpack、Rollup 和 PostCSS。
文件可以在开发人员的机器上逐步构建，这允许实时预览对源代码所做的更改。
缺点

存储库 仅包含与 Shopline 主题平台不兼容的源代码。
编译的代码不受版本控制，这使得跟踪更改变得困难。您需要手动识别对已编译代码的更改，然后回填您的源代码，以便下次编译代码并覆盖主题时更改仍然存在。
